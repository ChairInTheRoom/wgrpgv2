<?php

class DialogConditionFactory {

	public static function evaluateCondition($strCondition){
		if(strpos($strCondition, '&')){
			$strSplit = explode('&', $strCondition);
			$intSplitCount = count($strSplit);
			$blnValue = array();
			for($i = 0; $i < $intSplitCount; $i++){
				$blnValue[$i] = self::evaluateCondition($strSplit[$i]);
				if($blnValue[$i] == false){
					return false;
				}
			}
			return true;
		}
		else{
			if(strpos($strCondition, '>')){
				$variable = explode('>', $strCondition);
				return (intval(call_user_func("self::get" . $variable[0])) > intval($variable[1]));
			}
			else if(strpos($strCondition, '<')){
				$variable = explode('<', $strCondition);
				return (intval(call_user_func("self::get" . $variable[0])) < intval($variable[1]));
			}
			else if(strpos($strCondition, '>=')){
				$variable = explode('>', $strCondition);
				return (intval(call_user_func("self::get" . $variable[0])) >= intval($variable[1]));
			}
			else if(strpos($strCondition, '<=')){
				$variable = explode('>', $strCondition);
				return (intval(call_user_func("self::get" . $variable[0])) <= intval($variable[1]));
			}
			else if(strpos($strCondition, '=')){
				$variable = explode('>', $strCondition);
				return (intval(call_user_func("self::get" . $variable[0])) == intval($variable[1]));
			}
		}
	}
	
	public static function evaluateAction($strAction){
		if(strpos($strAction, '+')){
			$variable = explode('+', $strAction);
			call_user_func("self::add" . $variable[0], intval($variable[1]));
		}
		else if(strpos($strAction, '-')){
			$variable = explode('-', $strAction);
			call_user_func("self::add" . $variable[0], intval(-1 * abs($variable[1])));
		}
		else if(strpos($strAction, '*')){
			$variable = explode('*', $strAction);
			call_user_func("self::set" . $variable[0], (floatval($variable[1]) * floatval(self::getWeight())));
		}
		else if(strpos($strAction, '~')){
			$function = explode('~', $strAction);
			call_user_func("self::" . $function[0], intval($function[1]));
		}
	}
	
	public static function getWeight(){
		return $_SESSION['objRPGCharacter']->getWeight();
	}
	
	public static function addWeight($intValue){
		$_SESSION['objRPGCharacter']->setWeight(intval($_SESSION['objRPGCharacter']->getWeight()) + intval($intValue));
	}
	
	public static function setWeight($dblValue){
		$_SESSION['objRPGCharacter']->setWeight($dblValue);
	}
	
	public static function forceEatItem($intItemID){
		$_SESSION['objRPGCharacter']->forceEatItem($intItemID);
	}
	
	public static function giveItem($intItemID){
		$_SESSION['objRPGCharacter']->giveItem($intItemID);
	}
	
	public static function getBMI(){
		return $_SESSION['objRPGCharacter']->getBMI();
	}
}

?>